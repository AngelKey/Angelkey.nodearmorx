// Generated by IcedCoffeeScript 108.0.9
(function() {
  var BigInteger, Encoding, Foo, nbi, nbv, std_alphabet, std_encoding, _i, _ref, _results;

  _ref = require('bn'), nbv = _ref.nbv, nbi = _ref.nbi, BigInteger = _ref.BigInteger;

  exports.Encoding = Encoding = (function() {
    function Encoding(alphabet, in_block_len) {
      var a, i, _i, _len, _ref1;
      this.alphabet = alphabet;
      this.in_block_len = in_block_len;
      this.base = 58;
      this.base_big = nbv(this.base);
      this.log58 = Math.log2(this.base);
      this.out_block_len = Math.ceil(8 * this.in_block_len / this.log58);
      if (this.alphabet.length !== this.base) {
        throw new Error("Encoder alphabet length must be 58 chars");
      }
      this.decode_map = {};
      _ref1 = this.alphabet;
      for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
        a = _ref1[i];
        this.decode_map[a] = i;
      }
    }

    Encoding.prototype.encode = function(src) {
      var i, inc, _;
      inc = this.in_block_len;
      return ((function() {
        var _i, _len, _results;
        _results = [];
        for ((inc > 0 ? (i = _i = 0, _len = src.length) : i = _i = src.length - 1); inc > 0 ? _i < _len : _i >= 0; i = _i += inc) {
          _ = src[i];
          _results.push(this.encode_block(src.slice(i, i + inc)));
        }
        return _results;
      }).call(this)).join('');
    };

    Encoding.prototype.encode_block = function(block) {
      var chars, i, num, pad, padlen, r;
      num = nbi().fromBuffer(block);
      chars = (function() {
        var _ref1, _results;
        _results = [];
        while (num.compareTo(BigInteger.ZERO) > 0) {
          _ref1 = num.divideAndRemainder(this.base_big), num = _ref1[0], r = _ref1[1];
          _results.push(this.alphabet[r.intValue()]);
        }
        return _results;
      }).call(this);
      chars.reverse();
      padlen = this.encoded_len(block.length) - chars.length;
      pad = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 0; 0 <= padlen ? _i < padlen : _i > padlen; i = 0 <= padlen ? ++_i : --_i) {
          _results.push(this.alphabet[0]);
        }
        return _results;
      }).call(this);
      return (pad.concat(chars)).join('');
    };

    Encoding.prototype.encoded_len = function(n) {
      var nblocks, out, rem;
      if (n === this.in_block_len) {
        return this.out_block_len;
      } else {
        nblocks = ~~(n / this.in_block_len);
        out = nblocks * this.out_block_len;
        if ((rem = n % this.in_block_len) > 0) {
          out += Math.ceil(rem * 8 / this.log58);
        }
        return out;
      }
    };

    return Encoding;

  })();

  Foo = (function() {
    function Foo() {}

    Foo.prototype.decode = function(str) {
      var base, c, char_index, i, num, pad, start, _i, _j, _len, _ref1;
      num = BigInteger.ZERO;
      base = BigInteger.ONE;
      i = 0;
      for (i = _i = 0, _len = str.length; _i < _len; i = ++_i) {
        c = str[i];
        if (c !== this.alphabet[0]) {
          break;
        }
      }
      start = i;
      pad = new Buffer((function() {
        var _j, _results;
        _results = [];
        for (i = _j = 0; 0 <= start ? _j < start : _j > start; i = 0 <= start ? ++_j : --_j) {
          _results.push(0);
        }
        return _results;
      })());
      _ref1 = str.slice(start);
      for (i = _j = _ref1.length - 1; _j >= 0; i = _j += -1) {
        c = _ref1[i];
        if ((char_index = this.lookup[c]) == null) {
          throw new Error('Value passed is not a valid BaseX string.');
        }
        num = num.add(base.multiply(nbv(char_index)));
        base = base.multiply(this.basebn);
      }
      return Buffer.concat([pad, new Buffer(num.toByteArray())]);
    };

    return Foo;

  })();

  exports.std_alphabet = std_alphabet = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';

  exports.std_encoding = std_encoding = new Encoding(std_alphabet, 19);

  console.log(std_encoding.encode(new Buffer((function() {
    _results = [];
    for (_i = 0; _i < 300; _i++){ _results.push(_i); }
    return _results;
  }).apply(this))));

}).call(this);
