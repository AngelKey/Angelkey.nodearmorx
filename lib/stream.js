// Generated by IcedCoffeeScript 108.0.11
(function() {
  var StreamDecoder, StreamEncoder, calculate_high_water_mark, desired_high_water_mark, enc, stream,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  stream = require('stream');

  enc = require('./encoding');

  desired_high_water_mark = 4096;

  calculate_high_water_mark = function(input_length) {
    return input_length * Math.floor(desired_high_water_mark / input_length);
  };

  exports.StreamEncoder = StreamEncoder = (function(_super) {
    var _flush;

    __extends(StreamEncoder, _super);

    function StreamEncoder(encoder) {
      this.encoder = encoder;
      this.extra = null;
      this.block_size = this.encoder.in_block_len;
      StreamEncoder.__super__.constructor.call(this, {
        highWaterMark: calculate_high_water_mark(encoder.in_block_len)
      });
    }

    StreamEncoder.prototype._transform = function(chunk, encoding, cb) {
      var remainder;
      if (this.extra) {
        chunk = Buffer.concat([this.extra, chunk]);
        this.extra = null;
      }
      remainder = chunk.length % this.block_size;
      if (remainder !== 0) {
        this.extra = chunk.slice(chunk.length - remainder, chunk.length);
        chunk = chunk.slice(0, chunk.length - remainder);
      }
      this.push(this.encoder.encode(chunk));
      return cb();
    };

    _flush = function(cb) {
      if (this.extra) {
        this.push(this.encoder.encode(extra));
      }
      return cb();
    };

    return StreamEncoder;

  })(stream.Transform);

  exports.StreamDecoder = StreamDecoder = (function(_super) {
    var _flush;

    __extends(StreamDecoder, _super);

    function StreamDecoder(decoder) {
      this.decoder = decoder;
      this.extra = null;
      this.block_size = this.decoder.out_block_len;
      StreamDecoder.__super__.constructor.call(this, {
        highWaterMark: calculate_high_water_mark(decoder.out_block_len)
      });
    }

    StreamDecoder.prototype._transform = function(chunk, encoding, cb) {
      var remainder;
      if (this.extra) {
        chunk = Buffer.concat([this.extra, chunk]);
        this.extra = null;
      }
      remainder = chunk.length % this.block_size;
      if (remainder !== 0) {
        this.extra = chunk.slice(chunk.length - remainder);
        chunk = chunk.slice(0, chunk.length - remainder);
      }
      this.push(this.decoder.decode(chunk));
      return cb();
    };

    _flush = function(cb) {
      if (this.extra) {
        this.push(this.decoder.decode(extra));
      }
      return cb();
    };

    return StreamDecoder;

  })(stream.Transform);

}).call(this);
